using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace AdapterGenerator
{
    [Generator]
    public class CodeGenerator : ISourceGenerator
    {
        const string usingRef = "using System;";
        const string nameSpace = "namespace HM2.AutoGenerated";
        const string nameClass = "public class MovableAdapter : HM2.GameSolve.Interfaces.IMovable";
        const string constr = "HM2.MovableObject.UObject obj;public MovableAdapter(HM2.MovableObject.UObject obj){this.obj = obj;}";

        public void Initialize(GeneratorInitializationContext context)
        {

        }

        public void Execute(GeneratorExecutionContext context)
        {
           // Debugger.Launch();

            var compilation = context.Compilation;
            var imovableInterface = compilation.GetTypeByMetadataName("HM2.GameSolve.Interfaces.IMovable");

            //получаем код интерфейса
            string codeImovableInterface = context.Compilation.SyntaxTrees.Where(x => x.GetText().ToString().Contains("interface IMovable")).ToList().First().GetText().ToString();
            var methods = GetMethods(codeImovableInterface);
            //Получение сигнатуры методов



            StringBuilder code = new StringBuilder();
            code.Append(usingRef);
            code.Append(nameSpace);
            code.Append("{");
            code.Append(nameClass);
            code.Append("{");
            code.Append(constr);

            foreach (var item in methods)
            {
                code.Append(GetCodeMethod(item));
            }
            code.Append("}}");
            context.AddSource("Generator", SourceText.From(code.ToString(), Encoding.UTF8));
        }

        List<string> GetMethods(string inputCode)
        {
            string str = inputCode.Remove(0, inputCode.LastIndexOf('{') + 1);
            str = str.Remove(str.IndexOf('}'));
            List<string> methodsSign = str.Trim(Environment.NewLine.ToCharArray()).Split(Environment.NewLine.ToCharArray()).ToList().Where(x => x.Contains(";")).ToList();
            return methodsSign;
        }
        List<string> GetParametersMethod(string method)
        {
            string parameters = method.Remove(0, method.IndexOf('(') + 1);
            return parameters.Remove(parameters.LastIndexOf(')'), parameters.Length - parameters.LastIndexOf(')')).Split(',').ToList();
        }
        List<string> GetNameParametersMethod(string method)
        {
            List<string> paraemters = GetParametersMethod(method);

            List<string> paraemtersNames = new List<string>();
            foreach (string item in paraemters)
            {
                if (item != "")
                    paraemtersNames.Add(item.Split(' ')[1]);
            }
            return paraemtersNames;
        }
        string GetReturnTypeMethod(string method)
        {
            method = method.Trim();
            return method.Trim().Remove(method.IndexOf(' '), method.Length - method.IndexOf(' ')).Trim();
        }

        List<string> GetParametersTypesMethod(string method)
        {
            string parameters = method.Remove(0, method.IndexOf('(') + 1);
            parameters = parameters.Remove(parameters.LastIndexOf(')'), parameters.Length - parameters.LastIndexOf(')'));

            List<string> outPut = new List<string>();
            foreach (var item in parameters.Split(',').ToList())
            {
                outPut.Add(item.Split(' ')[0]);
            }

            return outPut;
        }

        string GetNameMethod(string method)
        {
            method = method.Trim();
            string name = method.Remove(0, method.IndexOf(' '));
            return name.Remove(name.IndexOf('('), name.Length - name.IndexOf('(')).Trim();
        }

        string GetCodeMethod(string method)
        {
            StringBuilder code = new StringBuilder();
            code.Append($"public ");
            code.Append(GetReturnTypeMethod(method));
            code.Append(" ");
            code.Append(GetNameMethod(method));
            code.Append(" (");
            List<string> parameters = GetParametersMethod(method);

            string parametersList = "";
            foreach (string item in parameters)
            {
                parametersList += (item + ",");
            }
            code.Append(parametersList.Trim(','));
            code.Append(") {");
            

            if (parametersList.Trim(',') != "")
                parametersList = "," + parametersList.Trim(',');
            else
                parametersList = parametersList.Trim(',');

            string returnTypes = GetReturnTypeMethod(method);
            returnTypes = returnTypes.Split(' ')[0];

            string parametersTypes = "";
            var list = GetParametersTypesMethod(method);
            foreach (var item in list)
            {
                if (item != "")
                    parametersTypes += ",";

                parametersTypes += item;
            }

            string names = "";
            var parametersNames = GetNameParametersMethod(method);
            foreach (var item in parametersNames)
            {
                if (item != "")
                    names += ",";

                names += item;
            }

            if (returnTypes != "void")
            {
                code.Append(" return ");
                code.Append(@$"HM2.IoCs.IoC<Func<HM2.MovableObject.UObject{parametersTypes}, {returnTypes}>>.Resolve(""{GetNameMethod(method)}"").Invoke(obj{names});");
            }
            else
            {
                code.Append(@$"HM2.IoCs.IoC<Action<HM2.MovableObject.UObject{parametersTypes}>>.Resolve(""{GetNameMethod(method)}"").Invoke(obj{names});");
            }

            code.Append("}");
            return code.ToString();
        }
    }
}
